#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

export PATH="@path@"
export NAME="@name@"
# Internal field separator for privileged process commands
export CMD_IFS=":"
export PY_SH_FD
export SH_PY_FD
export COMMIT_MSG_W_FD
export COMMIT_MSG_R_FD
export TMP_DIR
export TERM_CORE_SIGS

readonly WORKER="@worker@"
readonly DROP_PRIV=(setpriv --reuid nobody --regid nobody
                   --clear-groups --inh-caps=-all)

function get_term_core_default_action_sigs {
  local sigs=(
    SIGHUP SIGINT SIGQUIT SIGILL SIGTRAP SIGABRT SIGBUS SIGFPE SIGUSR1 SIGSEGV
    SIGUSR2 SIGPIPE SIGALRM SIGTERM SIGSTKFLT SIGXCPU SIGXFSZ SIGVTALRM SIGPROF
    SIGIO SIGPWR SIGSYS
  )

  local signums=()
  local s
  for s in "${sigs[@]}"
  do
    signums+=("$(kill -l "$s")")
  done

  # Real-time signals
  for ((s=$(kill -l SIGRTMIN); s<=$(kill -l SIGRTMAX); s++)); do
    signums+=("$s")
  done

  printf "%s" "${signums[*]}"
}

TERM_CORE_SIGS="$(get_term_core_default_action_sigs)"

function array_to_csv {
  printf "%s" "${1// /,}"
}

function setup_ipc {
  # Anonymous pipe hijacking trick
  exec {PY_SH_FD}<><(:)
  exec {SH_PY_FD}<><(:)

  local tmp
  tmp=$(mktemp)

  # For git commit message use a regular file
  exec {COMMIT_MSG_W_FD}>"$tmp"
  exec {COMMIT_MSG_R_FD}<"$tmp"

  rm "$tmp"
}

function mktemp_dir {
  TMP_DIR=$(mktemp --directory --tmpdir "$NAME.XXXXXXXXXX")
  readonly TMP_DIR
}

function log_error {
  echo "$NAME: error: $*" >&2
}

function parse_options {
  local color="auto"

  local opt
  for opt in "$@"; do
    case $opt in
      -h|--help)
        man --pager=cat --local-file "@man@" | head --lines=-4 | tail --lines=+3
        exit 0
      ;;

      -V|--version)
        echo "@version@"
        exit 0
      ;;

      --color=*)
        color="${opt#*=}"
      ;;

      --color)
        color="next"
      ;;

      *)
        if [[ "$color" == "next" ]]; then
          color="$opt"
        fi
      ;;
    esac
  done

  if [[ "$color" == "never" ]]; then
    export NO_COLOR="1"
  fi
  if [[ "$color" == "always" ]]; then
    export FORCE_COLOR="1"
  fi
}

function check_singleton {
  local LOCK_FD
  exec {LOCK_FD}<"$WORKER"

  if ! flock --nonblock $LOCK_FD; then
    log_error "process is already running"
    exit 1
  fi
}

function check_permissions {
  if ! "${DROP_PRIV[@]}" true; then
    log_error "unable to drop privileges to 'nobody'; try using 'sudo'"
    exit 1
  fi
}

function main {
  parse_options "$@"

  # Prohibit multiple runs
  check_singleton

  # Drop privelege permissions
  check_permissions

  mktemp_dir
  setup_ipc

  $WORKER &

  # Drop priveleges.
  # Blocking signals is here to give the python script time
  # to set custom handlers for them in case such signals are
  # received too early.
  local py_opts=(@py_opts@)
  exec "${DROP_PRIV[@]}" \
      env --block-signal="$(array_to_csv "$TERM_CORE_SIGS")" HOME=/var/empty \
        python "${py_opts[@]}" "@pyfile@" "$@"
}

main "$@"
